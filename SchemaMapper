import org.apache.beam.sdk.schemas.Schema;
import com.google.pubsub.v1.Schema as GoogleSchema;
import com.google.pubsub.v1.Schema.Field as GoogleField;
import org.apache.beam.sdk.schemas.Schema.FieldType;

public class SchemaMapper {

    public static Schema convertGoogleSchemaToBeamSchema(GoogleSchema googleSchema) {
        Schema.Builder beamSchemaBuilder = Schema.builder();

        for (GoogleField googleField : googleSchema.getFieldsList()) {
            String fieldName = googleField.getName();
            FieldType fieldType = mapFieldType(googleField.getType());

            // Add the field to the Apache Beam Schema
            beamSchemaBuilder.addField(fieldName, fieldType);
        }

        return beamSchemaBuilder.build();
    }

    private static FieldType mapFieldType(GoogleField.Type googleFieldType) {
        // Map Google Schema field types to Apache Beam Schema field types
        switch (googleFieldType) {
            case STRING:
                return FieldType.STRING;
            case INT64:
                return FieldType.INT64;
            case DOUBLE:
                return FieldType.DOUBLE;
            // Add more mappings for other types as needed
            default:
                return FieldType.STRING; // Default to string
        }
    }
}
