static Row stringToRow(String rowString) {
    // Remove "Row:[" and "]" from the string
    rowString = rowString.substring(5, rowString.length() - 1);
    
    // Split the string into fields
    String[] fieldStrings = rowString.split(", ");

    // Create an array of objects for the Row
    Object[] fields = new Object[fieldStrings.length];
    for (int i = 0; i < fieldStrings.length; i++) {
        String field = fieldStrings[i].trim();
        if (field.equals("Row")) {
            // If the field is "Row", it indicates a nested Row
            fields[i] = parseNestedRow(fieldStrings, i);
        } else {
            fields[i] = field;
        }
    }

    // Create and return the Row
    return new Row(fields);
}

// Parse a nested Row
static Row parseNestedRow(String[] fieldStrings, int startIndex) {
    int endIndex = startIndex + 1;
    int openBracketCount = 1;
    while (endIndex < fieldStrings.length) {
        String field = fieldStrings[endIndex].trim();
        if (field.equals("Row")) {
            openBracketCount++;
        } else if (field.equals("]")) {
            openBracketCount--;
            if (openBracketCount == 0) {
                break;
            }
        }
        endIndex++;
    }

    // Extract the substring containing the nested Row
    String[] nestedRowStrings = Arrays.copyOfRange(fieldStrings, startIndex, endIndex + 1);
    String nestedRowString = String.join(", ", nestedRowStrings);

    // Recursively parse the nested Row
    return new Row(stringToRow(nestedRowString));
}